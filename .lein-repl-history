(defn distance-squared [c1 c2]
    "Euclidean distance between two collections considered as coordinates"
    (->> (map - c1 c2) (map #(* % %)) (reduce +)))
(distance-squared [1 1 1] [0 0 0])
(distance-squared [2 2 2] [0 0 0])
(distance-squared [2] [0])
(def all-cabs 
    (atom
        [{:number "1", :driver-name "A" :color "Pink" :location {:latitude 11.5 :longitude 13.5}}
        {:number "2", :driver-name "B" :color "Pink" :location {:latitude 11.5 :longitude 13.5}}
        {:number "3", :driver-name "C" :color "Pink" :location {:latitude 11.5 :longitude 13.5}}
        {:number "4", :driver-name "D" :color "Pink" :location {:latitude 11.5 :longitude 13.5}}
        {:number "5", :driver-name "E" :color "Pink" :location {:latitude 11.5 :longitude 13.5}}]))
(defn distance-squared [c1 c2]
    "Euclidean distance between two collections considered as coordinates"
    (->> (map - c1 c2) (map #(* % %)) (reduce +)))
(defn get-nearest-free-cabs [booked-list longitude latitude]
    (let [available-cabs (filter (fn [cab] (some #(= % (:number cab)) booked-list)) @all-cabs)]
    (apply min-key (fn [x1 x2] 
                    (letfn [(get-long-lat-array [x] [(:latitude x) (:longitude x)])]
                        (distance-squared 
                            (get-long-lat-array x1)
                            (get-long-lat-array x2)))) available-cabs)))
